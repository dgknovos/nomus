<?php
module_load_include('inc', 'nomus', 'nomus_documentloader');
module_load_include('inc', 'nomus', 'nomus_documentconverter');
module_load_include('inc', 'nomus', 'nomus_documentrenderer');
module_load_include('inc', 'nomus', 'nomus_documentparser');
module_load_include('inc', 'nomus', 'nomus_documentcitetables');
module_load_include('inc', 'nomus', 'nomus_search');
module_load_include('inc', 'nomus', 'nomus_tags');
module_load_include('inc', 'nomus', 'nomus_saveprint');
module_load_include('inc', 'nomus', 'nomus_casebox');
module_load_include('inc', 'nomus', 'nomus_freebase');
module_load_include('inc', 'nomus', 'nomus_search_blocks');

/* include content type hooks */
if ($handle = opendir(dirname(__FILE__) . '/doctypes')) {
    while (false !== ($file = readdir($handle))) {
    	 if ($file != "." && $file != ".." &&
    	     pathinfo($file, PATHINFO_EXTENSION) == 'inc' ) {
        	require_once(dirname(__FILE__) . '/doctypes/' . $file);
       } 
    }
    closedir($handle);
}


/**
 * Implementation of hook_admin()
 */
function nomus_admin() {
  $form = array();

  $form['nomus_documentloader_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Address of the Document Loader servlet'),
    '#default_value' => variable_get('nomus_documentloader_server',
    	'http://localhost:8090/sitespider/spider'),
    '#size' => 60,
    '#maxlength' => 120,
    '#required' => TRUE,
  );
  $form['nomus_documentconverter_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Address of the Document Converter servlet'),
    '#default_value' => variable_get('nomus_documentconverter_server',
    	'http://localhost:8090/docconverter/convert'),
    '#size' => 60,
    '#maxlength' => 120,
    '#required' => TRUE,
  );
  $form['nomus_documentparser_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Address of the Document Parser servlet'),
    '#default_value' => variable_get('nomus_documentparser_server',
    	'http://localhost:8090/docparser/parse'),
    '#size' => 60,
    '#maxlength' => 120,
    '#required' => TRUE,
  );
  $form['nomus_search_default_template'] = array(
    '#type' => 'textfield',
    '#title' => t('Default search template (node id)'),
    '#default_value' => variable_get('nomus_search_default_template',
    	'0'),
    '#size' => 60,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function nomus_menu() {

  // settings page
  $items['admin/settings/nomus'] = array(
    'title' => 'Nomus settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nomus_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );
   
   // freebase vocabulary menu
  $items['admin/content/taxonomy/freebase'] = array(
  	  'title' => t('Sync vocabularies with Freebase'),
  	  'page callback' => 'drupal_get_form',
  	  'page arguments' => array('nomus_freebase_vocab_form'),
  	  'access arguments' => array('access administration pages'),
  	  'type' => MENU_LOCAL_TASK,
  );
  
  // callback to pull in a freebase vocabulary
  $items['nomus/freebase/pull'] = array(
  	 'title' => 'Pull freebase vocabulary',
  	 'page callback' => 'nomus_freebase_pull_vocab_launch',
  	 'access arguments' => array('access administration pages'),
  	 'type' => MENU_CALLBACK,
  );

  // callback to perform a bulk load
  $items['nomus/documentloader/bulkload'] = array(
    'title' => 'Nomus Document Loader - Launch',
    'page callback' => 'nomus_documentloader_bulkload_launch',
    'access arguments' => array('access documentloader content'),
    'type' => MENU_CALLBACK,
  );   
  // callback to launch the document loader
  $items['nomus/documentloader/launch'] = array(
    'title' => 'Nomus Document Loader - Launch',
    'page callback' => 'nomus_documentloader_launch',
    'access arguments' => array('access documentloader content'),
    'type' => MENU_CALLBACK,
  );
  
  // callback used by the site spider browser plugin
  // to get the next javascript command
  $items['nomus/documentloader/nextcommand'] = array(
    'title' => 'Nomus Document Loader - Get Next JS Command',
    'page callback' => 'nomus_documentloader_nextcommand',
    'access arguments' => array('access documentloader content'),
    'type' => MENU_CALLBACK,
  );
  
  // callback used by the site spider browser plugin
  // to check whether a file already exists
  $items['nomus/documentloader/fileuniquecheck'] = array(
    'title' => 'Nomus Document Loader - File unique check',
    'page callback' => 'nomus_documentloader_fileuniquecheck',
    'access arguments' => array('access documentloader content'),
    'type' => MENU_CALLBACK,
  );
  // callback used by the site spider browser plugin
  // to post a file
  $items['nomus/documentloader/fileupload'] = array(
    'title' => 'Nomus Document Loader - Post file',
    'page callback' => 'nomus_documentloader_fileupload',
    'access arguments' => array('access documentloader content'),
    'type' => MENU_CALLBACK,
  );
  // callback to check the status
  $items['nomus/documentloader/status'] = array(
    'title' => 'Nomus Document Loader - Status check',
    'page callback' => 'nomus_documentloader_status',
    'access arguments' => array('access documentloader content'),
    'type' => MENU_CALLBACK,
  );
  // callback to get the raw (unthemed) content body of
  // of a GATE node (used by documentparser to get raw GATE
  // files)
  $items['nomus/documentparser/gatedoc'] = array(
    'title' => 'Nomus Document Parser - Raw GATE document retrieval',
    'page callback' => 'nomus_documentparser_gatedoc',
    'access arguments' => array('access documentparser content'),
    'type' => MENU_CALLBACK,
  );
  // add tag AHAH callback
  $items['nomus/tags/add'] = array(
    'title' => 'Nomus Tags - AHAH callback',
    'page callback' => 'nomus_tags_add_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // callback to process a document
  $items['nomus/process'] = array(
    'title' => 'Nomus - Process a document (convert, parse, render, table)',
    'page callback' => 'nomus_menu_process',
    'access arguments' => array('access documentparser content'),
    'type' => MENU_CALLBACK,
  );
  
  // callback to get the raw body of a node
  $items['nomus/raw'] = array(
    'title' => 'Nomus - Raw content',
    'page callback' => 'nomus_raw_content',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  // find a node based on a given index
  $items['nomus/lookup'] = array(
    'title' => 'Nomus - Lookup from index',
    'page callback' => 'nomus_lookup',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  // save form
  $items['nomus/save'] = array(
  	 'title' => 'Nomus - Save',
  	 'page callback' => 'drupal_get_form',
  	 'page arguments' => array('nomus_save_form'),
  	 'access arguments' => array('access content'),
  	 'type' => MENU_CALLBACK,
  );
  $items['nomus/save_complete'] = array(
  	 'title' => 'Nomus - Save Complete',
  	 'page callback' => 'nomus_save_complete',
  	 'access arguments' => array('access content'),
  	 'type' => MENU_CALLBACK,
  );
  
  // e-mail document form
  $items['nomus/email'] = array(
  	 'title' => 'Nomus - E-mail',
  	 'page callback' => 'drupal_get_form',
  	 'page arguments' => array('nomus_email_form'),
  	 'access arguments' => array('access content'),
  	 'type' => MENU_CALLBACK,
  );
  
  // casebox document scan form
  $items['nomus/citation_scan'] = array(
  	 'title' => 'Nomus - Scan Document for Citations',
  	 'page callback' => 'nomus_casebox_scan',
  	 'access arguments' => array('access casebox'),
  	 'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_nodeapi().
 *
 */
function nomus_nodeapi(&$node, $op, $teaser, $page) { 
  global $user;
  switch ($op) {
    case 'view':   
      // For document_source types, add a Document Loader
      // toolbar 
      if ($node->type == 'document_source' && $teaser == false &&
          user_access('access documentloader content')) {
			$node->content['nomus_documentloader_toolbar'] = array(
				'#type' => 'markup',
				'#prefix' => '<div>',
				'#suffix' => '</div>',
				'#weight' => -100,
				'#value' =>	drupal_get_form('nomus_documentloader_toolbox_form', array($node->nid))
				);
			}
		// for any node with a field_raw_file field, show tools
		// for parsing the file
		if ($node->field_raw_file && $teaser == false &&
		   user_access('access documentparser toolbox')) {
			$node->content['nomus_document_toolbar'] = array(
				'#type' => 'markup',
				'#prefix' => '<div>',
				'#suffix' => '</div>',
				'#weight' => -100,
				'#value' =>	drupal_get_form('nomus_document_toolbox_form', $node)
				);
			}
		// for all gate document nodes, show an external url
		if($teaser == false && preg_match('/^gate_/', $node->type)) {
			$url = nomus_documentparser_gatedoc_node_url($node->nid);
			$node->content['nomus_documentparser_rawurl'] = array(
				'#type' => 'item',
				'#title' => t('External URL (<i>Security note: this contains your user authentication token</i>)'),
				'#value' => t("<a href='$url'>$url</a>"),
				'#weight' => -1,
				);
		}
		// for all nodes with a field_tags_vote placeholder
		if($node->field_tags_vote) {
			$node->content['field_tags_vote']['field']['items'][0]['#item']['safe']
				= drupal_get_form('nomus_tags_form', $node);
		}
		
		if($node->type == 'search_template') {
			modalframe_child_js();
			
			// redirect anonymous users to the login-required page
			if($user->uid == 0) {
				drupal_goto('login-required', 'dialog=1');
			}
			else
				modalframe_close_dialog();
		}
		
		// call any doctype view hooks
		$hookname = $node->type . '_view';
		if(function_exists($hookname)) {
			$hookname($node, $teaser, $page);
		}
		break;
	case 'prepare':
	  	 // clear teaser as a workaround for drupal bug
	  	 // of combining teaser and body in the edit body
	  	 $node->teaser = '';
	  	 
	  	// allow a search template to open in a dialog
		if($node->type == 'search_template') {
			modalframe_child_js();
			
			// redirect anonymous users to the login-required page
			if($user->uid == 0) {
				drupal_goto('login-required', 'dialog=1');
			}	
		}
		
      break;
  	case 'presave':
  		// for gate applications, translate urls before saving
		if($node->type == 'gate_gapp')
			nomus_documentparser_translate_gate_urls($node);
  		break;
   case 'load':
  		// allow a search template to open in a deletedialog
		if($node->type == 'search_template' &&
			preg_match('/\/delete/', $_SERVER["REQUEST_URI"])) {
				modalframe_child_js();
			
				// redirect anonymous users to the login-required page
				if($user->uid == 0) {
					drupal_goto('login-required', 'dialog=1');
				}
		}
		break;
   case 'delete':
  		// close search template dialog after a node deletion
		if($node->type == 'search_template') {
			modalframe_child_js();
			modalframe_close_dialog();
		}
		break;
	}
}

/**
 * Blocks
 */
 /*
function nomus_block($op = 'list', $delta = 0, $edit = array()){
  switch ($op) {
    case 'view':
    	if (arg(0) == 'node' && is_numeric(arg(1)) && $node = node_load(arg(1))) {
      	$blocks['subject'] = t('Tags');
      	$blocks['content'] = drupal_get_form('nomus_tags_form', $node);
      	return $blocks;
    	}
    	break;
    case 'list':
      $blocks[0]['info'] = t('Tags for the current post');
    	$blocks[0]['cache'] = BLOCK_CACHE_PER_PAGE;
    	return $blocks;
    	break;
   }	
}*/

/**
 * Document toolbox form
 */
function nomus_document_toolbox_form($form_id, $node){
	$form = array();
	$form['nid'] = array(
    	'#type' => 'hidden',
   	'#value' => $node->nid,
  		);
   $form['toolbar'] = array(
    	'#type' => 'fieldset',
   	'#title' => t('Document Parser'),
  		);
	
	$form['toolbar']['buttons'] = array(
    	'#type' => 'markup',
   	'#prefix' => '<div class="container-inline">',
   	'#suffix' => '</div>',
  		);
  		
  $form['toolbar']['buttons']['convert'] = array(
    '#type' => 'submit',
    '#value' => t("Convert raw document"));
    	
    	
  $form['toolbar']['buttons']['parse'] = array(
    '#type' => 'submit',
    '#value' => t("Parse document"));
    
  $form['toolbar']['buttons']['render'] = array(
    '#type' => 'submit',
    '#value' => t("Render document"));
    
  $form['toolbar']['buttons']['citetables'] = array(
    '#type' => 'submit',
    '#value' => t("Generate citation tables"));
    
  $form['toolbar']['buttons']['process'] = array(
    '#type' => 'submit',
    '#value' => t("Process"));
    	 
	  return $form;
	}
	
function nomus_document_toolbox_form_submit($form, &$form_state) {
	if($_POST['op'] == 'Convert raw document') {
		$node = node_load($_POST['nid']);
		$node->field_error[0]['value'] = '';
		$node = nomus_documentconverter_convert($node);
		node_save($node);
	}
	if($_POST['op'] == 'Parse document') {
		$node = node_load($_POST['nid']);
		$node->field_error[0]['value'] = '';
		$node = nomus_documentparser_parse($node, $node->field_documentsource_ref[0]['nid']);
		node_save($node);
	}
	if($_POST['op'] == 'Render document') {
		$node = node_load($_POST['nid']);
		$node->field_error[0]['value'] = '';
		$node = nomus_documentrenderer_render($node);
		node_save($node);
	}
	if($_POST['op'] == 'Generate citation tables') {
		$node = node_load($_POST['nid']);
		$node->field_error[0]['value'] = '';
		$node = nomus_documentcitetables_generate($node);
		node_save($node);
	}
	if($_POST['op'] == 'Process') {
		nomus_bulk_process(array($_POST['nid']));
	}
}
	
/**
 * Implementation of hook_node_operations().
 *
 */
function nomus_node_operations() {
  $operations = array(
    'load-allyears' => array(
      'label' => t('Nomus: Bulk load with selected Sources (all years)'),
      'callback' => 'nomus_bulk_load_allyears',
    ),
    'load-currentmonth' => array(
      'label' => t('Nomus: Bulk load with selected Sources (current month)'),
      'callback' => 'nomus_bulk_load_currentmonth',
    ),
    'load-currentyear' => array(
      'label' => t('Nomus: Bulk load with selected Sources (current years)'),
      'callback' => 'nomus_bulk_load_currentyear',
    ),
    'convert' => array(
      'label' => t('Nomus: Convert the selected documents'),
      'callback' => 'nomus_bulk_convert',
    ),
    'parse' => array(
      'label' => t('Nomus: Parse the selected documents'),
      'callback' => 'nomus_bulk_parse',
    ),
    'generate-citation' => array(
    	'label' => t('Nomus: Generate citation'),
    	'callback' => 'nomus_bulk_generate_citation',
    ),
    'render' => array(
      'label' => t('Nomus: Render the selected documents'),
      'callback' => 'nomus_bulk_render',
    ),
    'generate_citetables' => array(
      'label' => t('Nomus: Generate citation tables'),
      'callback' => 'nomus_bulk_citetables',
    ),
    'process' => array(
      'label' => t('Nomus: Process (convert, parse, render, table)'),
      'callback' => 'nomus_bulk_process',
    ),
    'save' => array(
      'label' => t('Save'),
      'callback' => 'nomus_bulk_save',
    ),
    'email' => array(
      'label' => t('E-mail'),
      'callback' => 'nomus_bulk_email',
    ),
    'pull-vocab' => array(
      'label' => t('Pull vocabulary'),
      'callback' => 'nomus_freebase_pull_vocab',
    ),
    );
    return $operations;
}

function nomus_menu_process(){	
	// perform operations on the document node
	nomus_process($_GET['nid']);
}

/**
 * Bulk process
 */
function nomus_bulk_process($nids){
	foreach($nids as $nid) {	
		nomus_process($nid);
	}
}

/**
 * Process a single document
 */
function nomus_process($nid){
	$nids = array($nid);
	nomus_bulk_convert($nids);
	nomus_bulk_parse($nids);
	nomus_bulk_render($nids);
	nomus_bulk_citetables($nids);
}

/**
 * Implementation of hook_perm().
 *
 */
function nomus_perm() {
  return array(
    'access documentloader content',
    'access documentparser content',
    'access casebox',
    'access documentparser toolbox',
    'access bulk saveprint',
  );
}


/**
 * Lookup and redirect to a node based on an index
 */
function nomus_lookup() {
	$index = $_GET['index'];
	if($index && $index != '') {
		$result = db_query("SELECT nid, type FROM {node} WHERE title = '$index'");
		if($row = db_fetch_array($result)) {
		
			// if the node's a redirect, follow it
			$nid = $row['nid'];
			if($row->type == 'redirect') {
				$redirectNode = node_load($nid);
				$nid = $redirectNode->field_redirect_to[0]['nid'];
			}
				
			// open the node
			drupal_goto('node/' . $nid);
		}
	}
}

/**
 * Get the raw content body
 */
function nomus_raw_content() {
	$nodeId = $_GET['nodeId'];
	$node = node_load($nodeId);
	
	if(!node_access('view', $node)) {
		drupal_access_denied();
		return;
	}
	
	// load in the inner content stylesheet
	$cssUrl = base_path() . path_to_theme() . '/raw.css';
	$jsUrl = base_path() . path_to_theme() . '/raw.js';
  	$headPos = strpos($node->body, '</head>');
  	if($headPos !== false) {
  		$node->body = 
  			substr($node->body, 0, $headPos)
  			. '<link type="text/css" rel="stylesheet" media="all" href="'
  			. $cssUrl . '" />' . "\n"
  			. '<script type="text/javascript" src="'
  			. $jsUrl . '"></script>' . "\n"
  			. '</head>'
  			. substr($node->body, $headPos+strlen('</head>'));
  	}
	print $node->body;

}

/**
 * Form alter
 */
function nomus_form_alter(&$form, &$form_state, $form_id) {
	nomus_search_form_alter($form, $form_state, $form_id);
	nomus_casebox_form_alter($form, $form_state, $form_id);
	nomus_saveprint_form_alter($form, $form_state, $form_id);
}

?>